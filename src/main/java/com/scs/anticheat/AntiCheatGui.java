package com.scs.anticheat;

import com.scs.ScS;
import net.fabricmc.fabric.api.client.rendering.v1.HudRenderCallback;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.gui.DrawContext;
import net.minecraft.util.Formatting;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class AntiCheatGui {
    private static final MinecraftClient CLIENT = MinecraftClient.getInstance();
    private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat("HH:mm:ss");

    private static boolean listVisible = true;
    private static boolean menuOpen = false;

    public static void init() {
        ScS.LOGGER.info("=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø AntiCheatGui ===");

        try {
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ HUD
            HudRenderCallback.EVENT.register((drawContext, tickDelta) -> {
                try {
                    if (CLIENT.options.hideGui || CLIENT.getDebugOverlay().showDebugScreen()) {
                        return;
                    }

                    if (listVisible) {
                        renderAntiCheatList(drawContext);
                    }

                    if (menuOpen) {
                        renderMenu(drawContext);
                    }
                } catch (Exception e) {
                    ScS.LOGGER.error("–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HUD: {}", e.getMessage());
                }
            });
            ScS.LOGGER.info("‚úÖ AntiCheatGui –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
        } catch (Exception e) {
            ScS.LOGGER.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ AntiCheatGui: {}", e.getMessage());
        }
    }

    public static void toggleList() {
        listVisible = !listVisible;
        ScS.LOGGER.info("–°–ø–∏—Å–æ–∫ –∞–Ω—Ç–∏—á–∏—Ç–∞: {}", listVisible ? "–ø–æ–∫–∞–∑–∞–Ω" : "—Å–∫—Ä—ã—Ç");
    }

    public static void toggleMenu() {
        menuOpen = !menuOpen;
        if (!menuOpen && CLIENT.currentScreen != null) {
            CLIENT.setScreen(null);
        }
        ScS.LOGGER.info("–ú–µ–Ω—é –∞–Ω—Ç–∏—á–∏—Ç–∞: {}", menuOpen ? "–æ—Ç–∫—Ä—ã—Ç–æ" : "–∑–∞–∫—Ä—ã—Ç–æ");
    }

    public static boolean isListVisible() {
        return listVisible;
    }

    public static boolean isMenuOpen() {
        return menuOpen;
    }

    private static void renderAntiCheatList(DrawContext context) {
        try {
            List<AntiCheatDetection> detections = AntiCheatDetector.getDetections();

            if (detections.isEmpty()) {
                return;
            }

            int screenWidth = CLIENT.getWindow().getScaledWidth();
            int screenHeight = CLIENT.getWindow().getScaledHeight();

            // –ü–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
            int startX = screenWidth - 320;
            int startY = 10;
            int maxHeight = screenHeight - 100;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            int maxEntries = Math.min(15, (maxHeight - 60) / 12);
            int actualEntries = Math.min(detections.size(), maxEntries);

            // –†–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞
            int bgHeight = actualEntries * 12 + 55;

            // –§–æ–Ω –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            context.fill(startX - 5, startY - 5, startX + 315, startY + bgHeight, 0x88000000);

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            context.drawTextWithShadow(CLIENT.textRenderer,
                    "¬ßlüõ° ScS Enhanced Monitor",
                    startX, startY, 0xFFFFFF);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            int totalDetections = AntiCheatDetector.getTotalDetections();
            long criticalDetections = AntiCheatDetector.getCriticalDetections();

            String stats = String.format("–í—Å–µ–≥–æ: %d | –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö: %d", totalDetections, criticalDetections);
            context.drawText(CLIENT.textRenderer, stats, startX, startY + 12, 0xCCCCCC, false);

            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            context.drawText(CLIENT.textRenderer, "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", startX, startY + 22, 0x666666, false);

            int y = startY + 32;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            List<AntiCheatDetection> recentDetections = detections.size() > maxEntries
                    ? detections.subList(detections.size() - maxEntries, detections.size())
                    : detections;

            // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É
            for (int i = recentDetections.size() - 1; i >= 0; i--) {
                AntiCheatDetection detection = recentDetections.get(i);

                String timeStr = TIME_FORMAT.format(new Date(detection.getTimestamp()));
                int color = detection.getType().getColor();

                String text = String.format("[%s] %s - %s",
                        timeStr,
                        detection.getPlayerName(),
                        detection.getType().getDisplayName()
                );

                if (detection.getCount() > 1) {
                    text += " #" + detection.getCount();
                }

                // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                if (CLIENT.textRenderer.getWidth(text) > 300) {
                    text = CLIENT.textRenderer.trimToWidth(text, 280) + "...";
                }

                context.drawText(CLIENT.textRenderer, text, startX, y, color, false);
                y += 12;
            }

            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            context.drawText(CLIENT.textRenderer, "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", startX, y + 2, 0x666666, false);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à–∞—Ö –≤–Ω–∏–∑—É
            String hotkeys = "F8 - HUD | F9 - Menu | F10 - Clear";
            context.drawText(CLIENT.textRenderer, hotkeys, startX, y + 12, 0x888888, false);
        } catch (Exception e) {
            ScS.LOGGER.error("–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –∞–Ω—Ç–∏—á–∏—Ç–∞: {}", e.getMessage());
        }
    }

    private static void renderMenu(DrawContext context) {
        try {
            int screenWidth = CLIENT.getWindow().getScaledWidth();
            int screenHeight = CLIENT.getWindow().getScaledHeight();

            int menuWidth = 450;
            int menuHeight = 350;
            int menuX = (screenWidth - menuWidth) / 2;
            int menuY = (screenHeight - menuHeight) / 2;

            // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
            context.fill(0, 0, screenWidth, screenHeight, 0x80000000);

            // –§–æ–Ω –º–µ–Ω—é
            context.fill(menuX, menuY, menuX + menuWidth, menuY + menuHeight, 0xEE000000);

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            context.drawCenteredTextWithShadow(CLIENT.textRenderer,
                    "¬ßlüìä SCS Enhanced - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    menuX + menuWidth / 2, menuY + 10, 0xFFFFFF);

            List<AntiCheatDetection> detections = AntiCheatDetector.getDetections();
            int totalDetections = detections.size();

            int yPos = menuY + 35;
            int leftCol = menuX + 15;
            int rightCol = menuX + 240;

            // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            context.drawText(CLIENT.textRenderer, "¬ße–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", leftCol, yPos, 0xFFFFFF, false);
            yPos += 15;

            context.drawText(CLIENT.textRenderer, "‚Ä¢ –í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π: " + totalDetections, leftCol, yPos, 0xFFFFFF, false);
            yPos += 12;

            // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            long oneHourAgo = System.currentTimeMillis() - 3600000;
            long recentDetections = detections.stream()
                    .filter(d -> d.getTimestamp() > oneHourAgo)
                    .count();

            context.drawText(CLIENT.textRenderer, "‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: " + recentDetections, leftCol, yPos, 0xFFFFFF, false);
            yPos += 12;

            // –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
            long criticalCount = detections.stream()
                    .filter(d -> d.getType().isCritical())
                    .count();

            context.drawText(CLIENT.textRenderer, "‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π: " + criticalCount, leftCol, yPos, 0xFF5555, false);
            yPos += 12;

            // –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            long uniquePlayers = detections.stream()
                    .map(AntiCheatDetection::getPlayerName)
                    .distinct()
                    .count();

            context.drawText(CLIENT.textRenderer, "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: " + uniquePlayers, leftCol, yPos, 0xFFFFFF, false);
            yPos += 20;

            // –¢–æ–ø –Ω–∞—Ä—É—à–∏—Ç–µ–ª–∏
            context.drawText(CLIENT.textRenderer, "¬ßcüéØ –¢–æ–ø –Ω–∞—Ä—É—à–∏—Ç–µ–ª–∏:", leftCol, yPos, 0xFFFFFF, false);
            yPos += 15;

            Map<String, Long> playerCounts = detections.stream()
                    .collect(Collectors.groupingBy(AntiCheatDetection::getPlayerName, Collectors.counting()));

            int topYPos = yPos;
            playerCounts.entrySet().stream()
                    .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
                    .limit(5)
                    .forEach(entry -> {
                        String text = String.format("‚Ä¢ %s - %d –Ω–∞—Ä—É—à–µ–Ω–∏–π", entry.getKey(), entry.getValue());
                        context.drawText(CLIENT.textRenderer, text, leftCol, topYPos +
                                (int)(playerCounts.entrySet().stream()
                                        .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
                                        .limit(5)
                                        .collect(Collectors.toList())
                                        .indexOf(entry)) * 12, 0xFFFF55, false);
                    });

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º (–ø—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
            context.drawText(CLIENT.textRenderer, "¬ßaüìà –ü–æ —Ç–∏–ø–∞–º –Ω–∞—Ä—É—à–µ–Ω–∏–π:", rightCol, menuY + 50, 0xFFFFFF, false);
            int rightYPos = menuY + 70;

            Map<ViolationType, Long> typeCounts = detections.stream()
                    .collect(Collectors.groupingBy(AntiCheatDetection::getType, Collectors.counting()));

            for (ViolationType type : ViolationType.values()) {
                long count = typeCounts.getOrDefault(type, 0L);
                if (count > 0) {
                    double percentage = totalDetections > 0 ? (count * 100.0 / totalDetections) : 0;
                    String text = String.format("‚Ä¢ %s: %d (%.1f%%)", type.getDisplayName(), count, percentage);
                    context.drawText(CLIENT.textRenderer, text, rightCol, rightYPos, type.getColor(), false);
                    rightYPos += 12;
                }
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–Ω–∏–∑—É
            yPos = menuY + menuHeight - 80;
            context.drawText(CLIENT.textRenderer, "¬ß7‚öô –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:", leftCol, yPos, 0xFFFFFF, false);
            yPos += 15;

            context.drawText(CLIENT.textRenderer, "‚Ä¢ F8 - –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å HUD —Å–ø–∏—Å–æ–∫", leftCol, yPos, 0xCCCCCC, false);
            yPos += 12;

            context.drawText(CLIENT.textRenderer, "‚Ä¢ F9 - –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é", leftCol, yPos, 0xCCCCCC, false);
            yPos += 12;

            context.drawText(CLIENT.textRenderer, "‚Ä¢ F10 - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é", leftCol, yPos, 0xCCCCCC, false);
            yPos += 12;

            context.drawText(CLIENT.textRenderer, "‚Ä¢ ESC - –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", leftCol, yPos, 0xCCCCCC, false);
        } catch (Exception e) {
            ScS.LOGGER.error("–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–µ–Ω—é: {}", e.getMessage());
        }
    }
}