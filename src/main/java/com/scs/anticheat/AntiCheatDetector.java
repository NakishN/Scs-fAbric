package com.scs.anticheat;

import com.scs.Scs;
import net.fabricmc.fabric.api.client.message.v1.ClientReceiveMessageEvents;
import net.minecraft.client.MinecraftClient;
import net.minecraft.text.ClickEvent;
import net.minecraft.text.HoverEvent;
import net.minecraft.text.MutableText;
import net.minecraft.text.Text;

import java.util.ArrayList;
import java.util.List;

import static com.sun.org.apache.xalan.internal.xsltc.compiler.util.Type.Text;

public class AntiCheatDetector {
    private static final List<AntiCheatDetection> detections = new ArrayList<>();

    public static void init() {
        Scs.LOGGER.info("=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø AntiCheatDetector ===");

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        ClientReceiveMessageEvents.GAME.register((message, overlay) -> {
            if (!overlay) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º overlay —Å–æ–æ–±—â–µ–Ω–∏—è
                handleChatMessage(message);
            }
        });

        Scs.LOGGER.info("‚úÖ AntiCheatDetector –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
    }

    private static void handleChatMessage(Text message) {
        String messageText = message.getString();

        // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        Scs.LOGGER.info("=== –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï –ß–ê–¢–ê ===");
        Scs.LOGGER.info("–¢–µ–∫—Å—Ç: '{}'", messageText);
        Scs.LOGGER.info("–°–æ–¥–µ—Ä–∂–∏—Ç '–ê–Ω—Ç–∏-–ß–∏—Ç': {}", messageText.contains("–ê–Ω—Ç–∏-–ß–∏—Ç"));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω—Ç–∏—á–∏—Ç–∞
        if (messageText.contains("–ê–Ω—Ç–∏-–ß–∏—Ç") || messageText.contains("[–ê–Ω—Ç–∏-–ß–∏—Ç]")) {
            Scs.LOGGER.info("üö® –ù–ê–ô–î–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï –ê–ù–¢–ò–ß–ò–¢–ê!");

            String playerName = parsePlayerName(messageText);
            Scs.LOGGER.info("–ò–º—è –∏–≥—Ä–æ–∫–∞: '{}'", playerName);

            if (playerName != null && !playerName.isEmpty()) {
                ViolationType type = parseViolationType(messageText);
                int count = parseCount(messageText);

                Scs.LOGGER.info("–¢–∏–ø: {}, –°—á–µ—Ç: {}", type, count);

                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                createButtons(playerName, type);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º
                AntiCheatDetection detection = new AntiCheatDetection(playerName, messageText, type, count);
                synchronized (detections) {
                    detections.add(detection);
                    if (detections.size() > 100) {
                        detections.remove(0);
                    }
                }

                Scs.LOGGER.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {} - {}", playerName, type);
            } else {
                Scs.LOGGER.error("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ò–ó–í–õ–ï–ß–¨ –ò–ú–Ø –ò–ì–†–û–ö–ê");
                Scs.LOGGER.error("–°–æ–æ–±—â–µ–Ω–∏–µ: '{}'", messageText);
            }
        }
    }

    private static String parsePlayerName(String message) {
        Scs.LOGGER.info("–ü–∞—Ä—Å–∏–Ω–≥ –∏–º–µ–Ω–∏ –∏–∑: '{}'", message);

        try {
            // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            String cleaned = message.replaceAll("\\[\\d{2}:\\d{2}:\\d{2}\\]", "")
                    .replaceAll("\\[System\\]", "")
                    .replaceAll("\\[CHAT\\]", "")
                    .trim();

            Scs.LOGGER.info("–û—á–∏—â–µ–Ω–æ: '{}'", cleaned);

            String[] words = cleaned.split("\\s+");
            Scs.LOGGER.info("–°–ª–æ–≤–∞: {}", java.util.Arrays.toString(words));

            // –ò—â–µ–º –ø–æ—Å–ª–µ [–ê–Ω—Ç–∏-–ß–∏—Ç]
            for (int i = 0; i < words.length; i++) {
                if (words[i].contains("–ê–Ω—Ç–∏-–ß–∏—Ç") && i + 1 < words.length) {
                    String candidate = words[i + 1];
                    if (candidate.matches("[A-Za-z0-9_]{3,16}")) {
                        Scs.LOGGER.info("‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∏–∫: '{}'", candidate);
                        return candidate;
                    }
                }
            }

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            for (String word : words) {
                if (word.matches("[A-Za-z0-9_]{3,16}") &&
                        !word.equals("tried") &&
                        !word.equals("move") &&
                        !word.contains("[") &&
                        !word.contains("]")) {
                    Scs.LOGGER.info("üéØ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –Ω–∏–∫: '{}'", word);
                    return word;
                }
            }

        } catch (Exception e) {
            Scs.LOGGER.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e.getMessage());
        }

        return null;
    }

    private static ViolationType parseViolationType(String message) {
        if (message.contains("Move") || message.contains("move")) return ViolationType.MOVE;
        if (message.contains("Click") || message.contains("click")) return ViolationType.CLICK;
        if (message.contains("FastPlace") || message.contains("FastBreak")) return ViolationType.FASTPLACE;
        if (message.contains("HitBox") || message.contains("hitbox")) return ViolationType.HITBOX;
        if (message.contains("Velocity") || message.contains("velocity")) return ViolationType.VELOCITY;
        if (message.contains("KillAura") || message.contains("killaura")) return ViolationType.KILLAURA;
        if (message.contains("Delay") || message.contains("delay")) return ViolationType.DELAY;
        if (message.contains("AutoBot") || message.contains("autobot") || message.contains("robots")) return ViolationType.AUTOBOT;

        return ViolationType.MOVE;
    }

    private static int parseCount(String message) {
        try {
            if (message.contains("#")) {
                String[] parts = message.split("#");
                if (parts.length > 1) {
                    String numberPart = parts[1].trim().split("\\s+")[0];
                    return Integer.parseInt(numberPart);
                }
            }
        } catch (Exception e) {
            Scs.LOGGER.warn("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—á–µ—Ç—á–∏–∫–∞: {}", e.getMessage());
        }
        return 1;
    }

    private static void createButtons(String playerName, ViolationType type) {
        Scs.LOGGER.info("üõ†Ô∏è –°–û–ó–î–ê–ï–ú –ö–ù–û–ü–ö–ò –î–õ–Ø: '{}'", playerName);

        MinecraftClient client = MinecraftClient.getInstance();
        if (client.player == null) {
            Scs.LOGGER.error("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        try {
            // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            client.player.sendMessage(
                    Text.literal("¬ßc¬ßlTEST: –û–±–Ω–∞—Ä—É–∂–µ–Ω " + playerName + " - " + type.name()),
                    false
            );
            Scs.LOGGER.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");

            // –ó–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∏
            MutableText message = Text.literal("¬ß8¬ßl‚ñ¨‚ñ¨‚ñ¨ SCS ANTICHEAT ‚ñ¨‚ñ¨‚ñ¨");
            message.append(Text.literal("\n¬ßc¬ßl–ò–≥—Ä–æ–∫: " + playerName));
            message.append(Text.literal("\n¬ß7–ù–∞—Ä—É—à–µ–Ω–∏–µ: ¬ße" + type.name()));

            // –ö–Ω–æ–ø–∫–∏
            MutableText buttons = Text.literal("\n");

            buttons.append(Text.literal("¬ßa[–ó–ê–ú–û–†–û–ó–ò–¢–¨]")
                    .styled(style -> style
                            .withClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/freezing " + playerName))
                            .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,
                                    Text.literal("–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")))));

            buttons.append(Text.literal(" ¬ßb[–°–ü–ï–ö]")
                    .styled(style -> style
                            .withClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/matrix spectate " + playerName))
                            .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,
                                    Text.literal("–°–ª–µ–¥–∏—Ç—å –∑–∞ –∏–≥—Ä–æ–∫–æ–º")))));

            buttons.append(Text.literal(" ¬ße[–ê–ö–¢–ò–í–ù–û–°–¢–¨]")
                    .styled(style -> style
                            .withClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/playeractivity " + playerName))
                            .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,
                                    Text.literal("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")))));

            buttons.append(Text.literal(" ¬ß6[–ò–°–¢–û–†–ò–Ø]")
                    .styled(style -> style
                            .withClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/freezinghistory " + playerName))
                            .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,
                                    Text.literal("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫")))));

            message.append(buttons);
            message.append(Text.literal("\n¬ß8¬ßl‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨"));

            client.player.sendMessage(message, false);
            Scs.LOGGER.info("‚úÖ –ö–ù–û–ü–ö–ò –û–¢–ü–†–ê–í–õ–ï–ù–´!");

        } catch (Exception e) {
            Scs.LOGGER.error("‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö: {}", e.getMessage());
            e.printStackTrace();
        }
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã
    public static List<AntiCheatDetection> getDetections() {
        synchronized (detections) {
            return new ArrayList<>(detections);
        }
    }

    public static void clearDetections() {
        synchronized (detections) {
            detections.clear();
        }
    }
}