package com.scs.anticheat;

import com.scs.ScS;
import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientTickEvents;
import net.minecraft.client.MinecraftClient;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AntiCheatDetector {
    private static final MinecraftClient CLIENT = MinecraftClient.getInstance();

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π regex - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π
    private static final Pattern ANTICHEAT_PATTERN = Pattern.compile(
            ".*–ê–Ω—Ç–∏-–ß–∏—Ç.*?\\]\\s*(\\w+)\\s+(.+?)\\s*\\(([^)]+)\\)(?:\\s*#(\\d+))?.*",
            Pattern.CASE_INSENSITIVE
    );

    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º
    private static boolean isListening = false;
    private static String lastMessage = "";

    public static void init() {
        ScS.LOGGER.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AntiCheatDetector —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º...");

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        testFixedParsing();

        // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        startRealTimeMonitoring();

        ScS.LOGGER.info("AntiCheatDetector –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
    }

    private static void testFixedParsing() {
        ScS.LOGGER.info("=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê ===");

        String testMessage = "[13:35:40] [Render thread/INFO]: [System] [CHAT] [–ê–Ω—Ç–∏-–ß–∏—Ç] nakish_ tried to move abnormally (Move) #1";
        ScS.LOGGER.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º: {}", testMessage);

        parseAntiCheatMessage(testMessage);

        ScS.LOGGER.info("=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===");
    }

    private static void startRealTimeMonitoring() {
        ScS.LOGGER.info("–í–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...");
        isListening = true;

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        ClientTickEvents.END_CLIENT_TICK.register(client -> {
            if (isListening && client.player != null) {
                checkForNewChatMessages();
            }
        });
    }

    private static void checkForNewChatMessages() {
        try {
            // –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–ª—É—á–∞–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç –∏–∑ —á–∞—Ç–∞

            // TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Ç—É
            // –ü–æ–∫–∞ —á—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –º—ã —Å–ª—É—à–∞–µ–º
            if (System.currentTimeMillis() % 5000 < 50) { // –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                ScS.LOGGER.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω—Ç–∏—á–∏—Ç–∞...");
            }

        } catch (Exception e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        }
    }

    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    public static void handleRealMessage(String message) {
        if (isAntiCheatMessage(message)) {
            ScS.LOGGER.info("üö® –ü–ï–†–ï–•–í–ê–ß–ï–ù–û –†–ï–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ê–ù–¢–ò–ß–ò–¢–ê!");
            parseAntiCheatMessage(message);
        }
    }

    public static void parseAntiCheatMessage(String rawMessage) {
        try {
            ScS.LOGGER.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {}", rawMessage);

            // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            String cleanMessage = cleanMessage(rawMessage);
            ScS.LOGGER.info("–û—á–∏—â–µ–Ω–æ: {}", cleanMessage);

            if (!isAntiCheatMessage(cleanMessage)) {
                ScS.LOGGER.warn("–ù–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–Ω—Ç–∏—á–∏—Ç–∞");
                return;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–æ—á–∫–∞–º
            parseByStructure(cleanMessage);

        } catch (Exception e) {
            ScS.LOGGER.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e.getMessage());
            e.printStackTrace();
        }
    }

    private static void parseByStructure(String message) {
        try {
            ScS.LOGGER.info("–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: {}", message);

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é "[–ê–Ω—Ç–∏-–ß–∏—Ç]"
            int antiCheatIndex = message.toLowerCase().indexOf("–∞–Ω—Ç–∏-—á–∏—Ç");
            if (antiCheatIndex == -1) return;

            // –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "[–ê–Ω—Ç–∏-–ß–∏—Ç]"
            String afterAntiCheat = message.substring(antiCheatIndex);
            ScS.LOGGER.info("–ü–æ—Å–ª–µ '–ê–Ω—Ç–∏-–ß–∏—Ç': {}", afterAntiCheat);

            // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
            String[] parts = afterAntiCheat.split("\\s+");

            String playerName = null;
            String description = "";
            String violationType = "Unknown";
            int count = 1;

            // –ò—â–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ (–ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ "–ê–Ω—Ç–∏-–ß–∏—Ç")
            for (int i = 0; i < parts.length; i++) {
                String cleanPart = parts[i].replaceAll("[\\[\\]()]", "");
                if (isValidPlayerName(cleanPart)) {
                    playerName = cleanPart;

                    // –°–æ–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
                    StringBuilder descBuilder = new StringBuilder();
                    for (int j = i + 1; j < parts.length; j++) {
                        String word = parts[j];

                        // –ï—Å–ª–∏ —Å–ª–æ–≤–æ –≤ —Å–∫–æ–±–∫–∞—Ö - —ç—Ç–æ —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è
                        if (word.startsWith("(") && word.endsWith(")")) {
                            violationType = word.substring(1, word.length() - 1);
                        }
                        // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å # - —ç—Ç–æ —Å—á–µ—Ç—á–∏–∫
                        else if (word.startsWith("#")) {
                            try {
                                count = Integer.parseInt(word.substring(1));
                            } catch (NumberFormatException ignored) {}
                        }
                        // –ò–Ω–∞—á–µ —ç—Ç–æ —á–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è
                        else {
                            descBuilder.append(word).append(" ");
                        }
                    }
                    description = descBuilder.toString().trim();
                    break;
                }
            }

            if (playerName != null) {
                // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∫–æ–±–∫–∞—Ö, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
                if ("Unknown".equals(violationType)) {
                    violationType = detectViolationType(description);
                }

                String criticalityLevel = getCriticalityLevel(violationType);

                ScS.LOGGER.info("‚úÖ –£–°–ü–ï–®–ù–û –†–ê–°–ü–ê–†–°–ï–ù–û:");
                ScS.LOGGER.info("  üéØ –ò–≥—Ä–æ–∫: '{}'", playerName);
                ScS.LOGGER.info("  üìù –û–ø–∏—Å–∞–Ω–∏–µ: '{}'", description);
                ScS.LOGGER.info("  ‚ö†Ô∏è –¢–∏–ø: '{}'", violationType);
                ScS.LOGGER.info("  üî¢ –°—á–µ—Ç—á–∏–∫: {}", count);
                ScS.LOGGER.info("  üö® –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {}", criticalityLevel);

                // TODO: –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫

            } else {
                ScS.LOGGER.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º—è –∏–≥—Ä–æ–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏");
            }

        } catch (Exception e) {
            ScS.LOGGER.error("–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e.getMessage());
        }
    }

    private static String cleanMessage(String message) {
        return message
                .replaceAll("\\[\\d{2}:\\d{2}:\\d{2}\\]", "") // –≤—Ä–µ–º—è
                .replaceAll("\\[Render thread/INFO\\]:", "") // –ø–æ—Ç–æ–∫
                .replaceAll("\\[System\\]", "") // —Å–∏—Å—Ç–µ–º–∞
                .replaceAll("\\[CHAT\\]", "") // —á–∞—Ç
                .replaceAll("&[0-9a-fk-or]", "") // —Ü–≤–µ—Ç–∞
                .replaceAll("\\s+", " ") // –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                .trim();
    }

    private static boolean isAntiCheatMessage(String message) {
        return message.toLowerCase().contains("–∞–Ω—Ç–∏-—á–∏—Ç");
    }

    private static boolean isValidPlayerName(String name) {
        return name != null &&
                name.length() >= 3 &&
                name.length() <= 16 &&
                name.matches("[A-Za-z0-9_]+") &&
                !name.toLowerCase().matches("(–∞–Ω—Ç–∏|—á–∏—Ç|—Å–∏—Å—Ç–µ–º–∞|—á–∞—Ç)");
    }

    private static String detectViolationType(String description) {
        String lower = description.toLowerCase();

        if (lower.contains("move") || lower.contains("abnormally")) return "Move";
        if (lower.contains("place") || lower.contains("break") || lower.contains("quickly")) return "FastPlace";
        if (lower.contains("reach") || lower.contains("distance")) return "HitBox";
        if (lower.contains("velocity") || lower.contains("ignore")) return "Velocity";
        if (lower.contains("combat") || lower.contains("hacks")) return "KillAura";
        if (lower.contains("speed") || lower.contains("delay")) return "Delay";
        if (lower.contains("robots") || lower.contains("automatic")) return "AutoBot";
        if (lower.contains("click")) return "Click";

        return "Unknown";
    }

    private static String getCriticalityLevel(String violationType) {
        switch (violationType) {
            case "KillAura":
            case "Velocity":
            case "AutoBot":
            case "HitBox":
                return "üî¥ –ö–†–ò–¢–ò–ß–ù–û";
            case "FastPlace":
            case "Click":
            case "Delay":
                return "üü° –°–†–ï–î–ù–ï";
            case "Move":
                return "üü¢ –ù–ò–ó–ö–û";
            default:
                return "‚ö™ –ù–ï–ò–ó–í–ï–°–¢–ù–û";
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    public static void enableMonitoring() {
        isListening = true;
        ScS.LOGGER.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω");
    }

    public static void disableMonitoring() {
        isListening = false;
        ScS.LOGGER.info("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω");
    }

    public static boolean isMonitoring() {
        return isListening;
    }
}