package com.scs.anticheat;

import com.scs.ScS;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * –î–µ—Ç–µ–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∞–Ω—Ç–∏—á–∏—Ç–∞ SkyBars
 * –í–µ—Ä—Å–∏—è 2.2 - –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
public class AntiCheatDetector {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–Ω—Ç–∏—á–∏—Ç–∞
    private static final Pattern ANTICHEAT_PATTERN_WITH_COUNT = Pattern.compile(
            ".*–ê–Ω—Ç–∏-–ß–∏—Ç.*?\\]\\s*(\\w+)\\s+(.+?)\\s*\\(([^)]+)\\)\\s*#(\\d+).*",
            Pattern.CASE_INSENSITIVE | Pattern.DOTALL
    );

    private static final Pattern ANTICHEAT_PATTERN_NO_COUNT = Pattern.compile(
            ".*–ê–Ω—Ç–∏-–ß–∏—Ç.*?\\]\\s*(\\w+)\\s+(.+?)\\s*\\(([^)]+)\\).*",
            Pattern.CASE_INSENSITIVE | Pattern.DOTALL
    );

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
    private static final Map<String, Map<String, Integer>> playerViolations = new ConcurrentHashMap<>();
    private static final List<ViolationRecord> violationHistory = new ArrayList<>();

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private static int totalViolations = 0;
    private static boolean isListening = false;
    private static final DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
    public static class ViolationRecord {
        public final String timestamp;
        public final String playerName;
        public final String violationType;
        public final String description;
        public final int count;
        public final String criticalityLevel;

        public ViolationRecord(String playerName, String violationType, String description, int count, String criticalityLevel) {
            this.timestamp = LocalDateTime.now().format(timeFormatter);
            this.playerName = playerName;
            this.violationType = violationType;
            this.description = description;
            this.count = count;
            this.criticalityLevel = criticalityLevel;
        }
    }

    public static void init() {
        ScS.LOGGER.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AntiCheatDetector v2.2...");

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        clearAllData();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        testAllMessageFormats();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
        showDetailedStats();

        // –í–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        enableMonitoring();

        ScS.LOGGER.info("‚úÖ AntiCheatDetector v2.2 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
    }

    private static void testAllMessageFormats() {
        ScS.LOGGER.info("üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –§–û–†–ú–ê–¢–û–í –°–û–û–ë–©–ï–ù–ò–ô ===");

        String[] testMessages = {
                // –§–æ—Ä–º–∞—Ç —Å —Å—á–µ—Ç—á–∏–∫–æ–º #—á–∏—Å–ª–æ
                "[13:35:40] [Render thread/INFO]: [System] [CHAT] [–ê–Ω—Ç–∏-–ß–∏—Ç] nakish_ tried to move abnormally (Move) #1",
                "[14:22:15] [Render thread/INFO]: [System] [CHAT] [–ê–Ω—Ç–∏-–ß–∏—Ç] player123 used speed hacks (KillAura) #5",
                "[15:45:33] [Render thread/INFO]: [System] [CHAT] [–ê–Ω—Ç–∏-–ß–∏—Ç] TestUser broke blocks too quickly (FastPlace) #2",

                // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ë–ï–ó —Å—á–µ—Ç—á–∏–∫–∞ (–≤–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞)
                "[12:08:40] [Render thread/INFO]: [System] [CHAT] [–ê–Ω—Ç–∏-–ß–∏—Ç] vadimSSS01 tried to reach entity outside max reach distance (HitBox)",

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                "[10:15:22] [Render thread/INFO]: [System] [CHAT] [–ê–Ω—Ç–∏-–ß–∏—Ç] CheaterName used fly hacks (Fly) #12",
                "[09:30:45] [Render thread/INFO]: [System] [CHAT] [–ê–Ω—Ç–∏-–ß–∏—Ç] PlayerXYZ clicked too fast (AutoClick)",
                "[11:12:33] [Render thread/INFO]: [System] [CHAT] [–ê–Ω—Ç–∏-–ß–∏—Ç] BadPlayer ignored velocity changes (Velocity) #3",

                // –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å—á–µ—Ç–∞
                "[16:20:10] [Render thread/INFO]: [System] [CHAT] [–ê–Ω—Ç–∏-–ß–∏—Ç] vadimSSS01 tried to reach entity outside max reach distance (HitBox)",
                "[16:25:30] [Render thread/INFO]: [System] [CHAT] [–ê–Ω—Ç–∏-–ß–∏—Ç] vadimSSS01 used combat hacks (KillAura)",
        };

        for (int i = 0; i < testMessages.length; i++) {
            ScS.LOGGER.info("üìù –¢–µ—Å—Ç {}: {}", i + 1, testMessages[i]);
            parseAntiCheatMessage(testMessages[i]);
            ScS.LOGGER.info("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        }

        ScS.LOGGER.info("üß™ === –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===");
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    public static void handleRealMessage(String message) {
        if (isAntiCheatMessage(message)) {
            ScS.LOGGER.info("üö® –ü–û–õ–£–ß–ï–ù–û –†–ï–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ê–ù–¢–ò–ß–ò–¢–ê!");
            parseAntiCheatMessage(message);
        } else {
            ScS.LOGGER.info("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–Ω—Ç–∏—á–∏—Ç–∞: {}", message);
        }
    }

    public static void parseAntiCheatMessage(String rawMessage) {
        try {
            ScS.LOGGER.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {}", rawMessage);

            // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            String cleanMessage = cleanMessage(rawMessage);
            ScS.LOGGER.info("üßπ –û—á–∏—â–µ–Ω–æ: {}", cleanMessage);

            if (!isAntiCheatMessage(cleanMessage)) {
                ScS.LOGGER.warn("‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–Ω—Ç–∏—á–∏—Ç–∞");
                return;
            }

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
            boolean parsed = tryRegexParsing(cleanMessage);

            if (!parsed) {
                ScS.LOGGER.info("üîÑ Regex –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑...");
                parseByStructure(cleanMessage);
            }

        } catch (Exception e) {
            ScS.LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e.getMessage());
            e.printStackTrace();
        }
    }

    private static boolean tryRegexParsing(String message) {
        try {
            // –ü—Ä–æ–±—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å —Å—á–µ—Ç—á–∏–∫–æ–º
            Matcher matcherWithCount = ANTICHEAT_PATTERN_WITH_COUNT.matcher(message);
            if (matcherWithCount.find()) {
                String playerName = matcherWithCount.group(1);
                String description = matcherWithCount.group(2).trim();
                String violationType = matcherWithCount.group(3);
                int count = Integer.parseInt(matcherWithCount.group(4));

                processViolation(playerName, description, violationType, count, true);
                return true;
            }

            // –ü—Ä–æ–±—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –±–µ–∑ —Å—á–µ—Ç—á–∏–∫–∞
            Matcher matcherNoCount = ANTICHEAT_PATTERN_NO_COUNT.matcher(message);
            if (matcherNoCount.find()) {
                String playerName = matcherNoCount.group(1);
                String description = matcherNoCount.group(2).trim();
                String violationType = matcherNoCount.group(3);

                int count = incrementPlayerViolation(playerName, violationType);
                processViolation(playerName, description, violationType, count, false);
                return true;
            }

        } catch (Exception e) {
            ScS.LOGGER.debug("Regex –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: {}", e.getMessage());
        }

        return false;
    }

    private static void parseByStructure(String message) {
        try {
            ScS.LOGGER.info("üéØ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {}", message);

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é "[–ê–Ω—Ç–∏-–ß–∏—Ç]"
            int antiCheatIndex = message.toLowerCase().indexOf("–∞–Ω—Ç–∏-—á–∏—Ç");
            if (antiCheatIndex == -1) {
                ScS.LOGGER.warn("‚ùå '[–ê–Ω—Ç–∏-–ß–∏—Ç]' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏");
                return;
            }

            // –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "[–ê–Ω—Ç–∏-–ß–∏—Ç]"
            String afterAntiCheat = message.substring(antiCheatIndex + 8); // 8 = –¥–ª–∏–Ω–∞ "–∞–Ω—Ç–∏-—á–∏—Ç"
            afterAntiCheat = afterAntiCheat.replaceFirst("^[\\]\\s]*", "").trim(); // —É–±–∏—Ä–∞–µ–º ] –∏ –ø—Ä–æ–±–µ–ª—ã

            ScS.LOGGER.info("üìç –ü–æ—Å–ª–µ '[–ê–Ω—Ç–∏-–ß–∏—Ç]': '{}'", afterAntiCheat);

            // –†–∞–∑–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            String[] parts = afterAntiCheat.split("\\s+");
            if (parts.length < 3) {
                ScS.LOGGER.warn("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏");
                return;
            }

            String playerName = null;
            String description = "";
            String violationType = "Unknown";
            int count = 1;

            // –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞
            if (isValidPlayerName(parts[0])) {
                playerName = parts[0];

                // –°–æ–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏—â–µ–º —Ç–∏–ø –≤ —Å–∫–æ–±–∫–∞—Ö
                StringBuilder descBuilder = new StringBuilder();
                for (int i = 1; i < parts.length; i++) {
                    String word = parts[i];

                    // –ï—Å–ª–∏ –≤ —Å–∫–æ–±–∫–∞—Ö - —ç—Ç–æ —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è
                    if (word.startsWith("(") && word.endsWith(")")) {
                        violationType = word.substring(1, word.length() - 1);
                    }
                    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å # - —ç—Ç–æ —Å—á–µ—Ç—á–∏–∫
                    else if (word.startsWith("#")) {
                        try {
                            count = Integer.parseInt(word.substring(1));
                        } catch (NumberFormatException ignored) {}
                    }
                    // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
                    else {
                        descBuilder.append(word).append(" ");
                    }
                }

                description = descBuilder.toString().trim();

                // –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —Å–∞–º–∏
                boolean hasOriginalCount = count > 1 || message.contains("#");
                if (!hasOriginalCount) {
                    count = incrementPlayerViolation(playerName, violationType);
                }

                processViolation(playerName, description, violationType, count, hasOriginalCount);

            } else {
                ScS.LOGGER.warn("‚ùå '{}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –∏–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞", parts[0]);
            }

        } catch (Exception e) {
            ScS.LOGGER.error("‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {}", e.getMessage());
        }
    }

    private static void processViolation(String playerName, String description, String violationType, int count, boolean hasOriginalCount) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if (violationType.isEmpty() || "Unknown".equals(violationType)) {
            violationType = detectViolationType(description);
        }

        String criticalityLevel = getCriticalityLevel(violationType);
        String countInfo = hasOriginalCount ? count + " (—Å–µ—Ä–≤–µ—Ä–Ω—ã–π)" : count + " (–ø–æ–¥—Å—á–∏—Ç–∞–Ω–æ)";

        ScS.LOGGER.info("‚úÖ === –£–°–ü–ï–®–ù–û –†–ê–°–ü–ê–†–°–ï–ù–û ===");
        ScS.LOGGER.info("  üéØ –ò–≥—Ä–æ–∫: '{}'", playerName);
        ScS.LOGGER.info("  üìù –û–ø–∏—Å–∞–Ω–∏–µ: '{}'", description);
        ScS.LOGGER.info("  ‚ö†Ô∏è –¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è: '{}'", violationType);
        ScS.LOGGER.info("  üî¢ –°—á–µ—Ç—á–∏–∫: {}", countInfo);
        ScS.LOGGER.info("  üö® –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {}", criticalityLevel);

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
        ViolationRecord record = new ViolationRecord(playerName, violationType, description, count, criticalityLevel);
        violationHistory.add(record);
        totalViolations++;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        checkCriticalViolations(playerName, violationType, count, criticalityLevel);

        ScS.LOGGER.info("  üìä –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {}", totalViolations);
        ScS.LOGGER.info("‚úÖ ===========================");
    }

    private static void checkCriticalViolations(String playerName, String violationType, int count, String criticalityLevel) {
        if (criticalityLevel.contains("–ö–†–ò–¢–ò–ß–ù–û")) {
            if (count >= 5) {
                ScS.LOGGER.warn("üö®üö®üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢! üö®üö®üö®");
                ScS.LOGGER.warn("   –ò–≥—Ä–æ–∫ '{}' –¥–æ—Å—Ç–∏–≥ {} –Ω–∞—Ä—É—à–µ–Ω–∏–π —Ç–∏–ø–∞ '{}'!", playerName, count, violationType);
                ScS.LOGGER.warn("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!");
            } else if (count >= 3) {
                ScS.LOGGER.warn("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ò–≥—Ä–æ–∫ '{}' –∏–º–µ–µ—Ç {} –Ω–∞—Ä—É—à–µ–Ω–∏–π '{}'", playerName, count, violationType);
            }
        } else if (count >= 10) {
            ScS.LOGGER.warn("‚ö†Ô∏è –ò–≥—Ä–æ–∫ '{}' –∏–º–µ–µ—Ç –º–Ω–æ–≥–æ ({}) –Ω–∞—Ä—É—à–µ–Ω–∏–π '{}'", playerName, count, violationType);
        }
    }

    private static int incrementPlayerViolation(String playerName, String violationType) {
        playerViolations.putIfAbsent(playerName, new ConcurrentHashMap<>());
        Map<String, Integer> violations = playerViolations.get(playerName);
        return violations.merge(violationType, 1, Integer::sum);
    }

    private static void showDetailedStats() {
        ScS.LOGGER.info("üìä === –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");

        if (violationHistory.isEmpty()) {
            ScS.LOGGER.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö");
            return;
        }

        ScS.LOGGER.info("üìà –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {}", totalViolations);
        ScS.LOGGER.info("üë• –ò–≥—Ä–æ–∫–æ–≤ —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏: {}", playerViolations.size());

        ScS.LOGGER.info("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è:");
        for (int i = Math.max(0, violationHistory.size() - 5); i < violationHistory.size(); i++) {
            ViolationRecord record = violationHistory.get(i);
            ScS.LOGGER.info("   {} | {} | {} | {} x{} [{}]",
                    record.timestamp, record.playerName, record.violationType,
                    record.description, record.count, record.criticalityLevel);
        }

        if (playerViolations.size() > 0) {
            ScS.LOGGER.info("üìä –ü–æ –∏–≥—Ä–æ–∫–∞–º:");
            for (Map.Entry<String, Map<String, Integer>> playerEntry : playerViolations.entrySet()) {
                String playerName = playerEntry.getKey();
                Map<String, Integer> violations = playerEntry.getValue();

                ScS.LOGGER.info("   üë§ {}: ", playerName);
                for (Map.Entry<String, Integer> violationEntry : violations.entrySet()) {
                    String type = violationEntry.getKey();
                    int count = violationEntry.getValue();
                    String level = getCriticalityLevel(type);
                    ScS.LOGGER.info("      ‚îú‚îÄ {}: {} —Ä–∞–∑ [{}]", type, count, level);
                }
            }
        }

        ScS.LOGGER.info("üìä ===============================");
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private static String cleanMessage(String message) {
        return message
                .replaceAll("\\[\\d{2}:\\d{2}:\\d{2}\\]", "") // –≤—Ä–µ–º—è [12:34:56]
                .replaceAll("\\[Render thread/INFO\\]:", "") // –ø–æ—Ç–æ–∫
                .replaceAll("\\[System\\]", "") // —Å–∏—Å—Ç–µ–º–∞
                .replaceAll("\\[CHAT\\]", "") // —á–∞—Ç
                .replaceAll("&[0-9a-fk-or]", "") // —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã
                .replaceAll("\\s+", " ") // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
                .trim();
    }

    public static boolean isAntiCheatMessage(String message) {
        return message.toLowerCase().contains("–∞–Ω—Ç–∏-—á–∏—Ç");
    }

    private static boolean isValidPlayerName(String name) {
        return name != null &&
                name.length() >= 3 &&
                name.length() <= 16 &&
                name.matches("[A-Za-z0-9_]+") &&
                !name.toLowerCase().matches("(–∞–Ω—Ç–∏|—á–∏—Ç|—Å–∏—Å—Ç–µ–º–∞|—á–∞—Ç|render|thread|info|system)");
    }

    private static String detectViolationType(String description) {
        String lower = description.toLowerCase();

        if (lower.contains("move") || lower.contains("abnormally")) return "Move";
        if (lower.contains("place") || lower.contains("break") || lower.contains("quickly")) return "FastPlace";
        if (lower.contains("reach") || lower.contains("distance") || lower.contains("hitbox")) return "HitBox";
        if (lower.contains("velocity") || lower.contains("ignore") || lower.contains("knockback")) return "Velocity";
        if (lower.contains("combat") || lower.contains("hacks") || lower.contains("killaura") || lower.contains("aura")) return "KillAura";
        if (lower.contains("speed") || lower.contains("delay")) return "Delay";
        if (lower.contains("robots") || lower.contains("automatic") || lower.contains("bot")) return "AutoBot";
        if (lower.contains("click") || lower.contains("autoclick") || lower.contains("cps")) return "Click";
        if (lower.contains("fly") || lower.contains("flying") || lower.contains("levitation")) return "Fly";
        if (lower.contains("scaffold") || lower.contains("tower")) return "Scaffold";
        if (lower.contains("jesus") || lower.contains("water")) return "Jesus";

        return "Unknown";
    }

    private static String getCriticalityLevel(String violationType) {
        switch (violationType) {
            case "KillAura":
            case "Velocity":
            case "AutoBot":
            case "Fly":
            case "Jesus":
                return "üî¥ –ö–†–ò–¢–ò–ß–ù–û";
            case "HitBox":
            case "FastPlace":
            case "Click":
            case "Delay":
            case "Scaffold":
                return "üü° –°–†–ï–î–ù–ï";
            case "Move":
                return "üü¢ –ù–ò–ó–ö–û";
            default:
                return "‚ö™ –ù–ï–ò–ó–í–ï–°–¢–ù–û";
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

    public static void enableMonitoring() {
        isListening = true;
        ScS.LOGGER.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω");
    }

    public static void disableMonitoring() {
        isListening = false;
        ScS.LOGGER.info("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω");
    }

    public static boolean isMonitoring() {
        return isListening;
    }

    public static void clearAllData() {
        playerViolations.clear();
        violationHistory.clear();
        totalViolations = 0;
        ScS.LOGGER.info("üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ

    public static Map<String, Map<String, Integer>> getPlayerViolations() {
        return new ConcurrentHashMap<>(playerViolations);
    }

    public static List<ViolationRecord> getViolationHistory() {
        return new ArrayList<>(violationHistory);
    }

    public static int getTotalViolations() {
        return totalViolations;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è GUI –≤ –±—É–¥—É—â–µ–º)
    public static void submitMessage(String message) {
        ScS.LOGGER.info("üìù –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", message);
        handleRealMessage(message);
    }
}