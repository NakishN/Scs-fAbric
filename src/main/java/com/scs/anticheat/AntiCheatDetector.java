package com.scs.anticheat;

import com.scs.ScS;
import net.fabricmc.fabric.api.client.message.v1.ClientReceiveMessageEvents;
import net.minecraft.client.MinecraftClient;
import net.minecraft.text.ClickEvent;
import net.minecraft.text.HoverEvent;
import net.minecraft.text.MutableText;
import net.minecraft.text.Text;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AntiCheatDetector {
    private static final List<AntiCheatDetection> detections = new ArrayList<>();
    private static final Pattern ANTICHEAT_PATTERN = Pattern.compile(
            ".*\\[–ê–Ω—Ç–∏-–ß–∏—Ç\\]\\s+(\\w+)\\s+(.*?)(?:\\s*\\(([^)]+)\\))?(?:\\s*#(\\d+))?.*"
    );

    public static void init() {
        ScS.LOGGER.info("=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø AntiCheatDetector ===");

        try {
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
            ClientReceiveMessageEvents.GAME.register((message, overlay) -> {
                if (!overlay) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º overlay —Å–æ–æ–±—â–µ–Ω–∏—è
                    handleChatMessage(message);
                }
            });
            ScS.LOGGER.info("‚úÖ AntiCheatDetector –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
        } catch (Exception e) {
            ScS.LOGGER.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ AntiCheatDetector: {}", e.getMessage());
            e.printStackTrace();
        }
    }

    private static void handleChatMessage(Text message) {
        try {
            String messageText = message.getString();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω—Ç–∏—á–∏—Ç–∞
            if (messageText.contains("–ê–Ω—Ç–∏-–ß–∏—Ç") || messageText.contains("[–ê–Ω—Ç–∏-–ß–∏—Ç]")) {
                ScS.LOGGER.info("üö® –ù–ê–ô–î–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï –ê–ù–¢–ò–ß–ò–¢–ê!");

                String playerName = parsePlayerName(messageText);
                ScS.LOGGER.info("–ò–º—è –∏–≥—Ä–æ–∫–∞: '{}'", playerName);

                if (playerName != null && !playerName.isEmpty()) {
                    ViolationType type = parseViolationType(messageText);
                    int count = parseCount(messageText);

                    ScS.LOGGER.info("–¢–∏–ø: {}, –°—á–µ—Ç: {}", type, count);

                    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    createButtons(playerName, type);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
                    AntiCheatDetection detection = new AntiCheatDetection(playerName, messageText, type, count);
                    synchronized (detections) {
                        detections.add(detection);
                        if (detections.size() > 100) {
                            detections.remove(0);
                        }
                    }

                    ScS.LOGGER.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {} - {}", playerName, type);
                } else {
                    ScS.LOGGER.warn("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ò–ó–í–õ–ï–ß–¨ –ò–ú–Ø –ò–ì–†–û–ö–ê");
                    ScS.LOGGER.warn("–°–æ–æ–±—â–µ–Ω–∏–µ: '{}'", messageText);
                }
            }
        } catch (Exception e) {
            ScS.LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞: {}", e.getMessage());
        }
    }

    private static String parsePlayerName(String message) {
        try {
            // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
            String cleaned = message.replaceAll("\\[\\d{2}[–∞-—è]{3}\\.\\d{4}\\s+\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\]", "")
                    .replaceAll("\\[Render thread/INFO\\]", "")
                    .replaceAll("\\[net\\.minecraft\\.client\\.gui\\.components\\.ChatComponent/\\]:", "")
                    .replaceAll("\\[System\\]", "")
                    .replaceAll("\\[CHAT\\]", "")
                    .trim();

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º regex –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            Matcher matcher = ANTICHEAT_PATTERN.matcher(cleaned);
            if (matcher.find()) {
                String playerName = matcher.group(1);
                if (playerName != null && playerName.matches("[A-Za-z0-9_]{3,16}")) {
                    return playerName;
                }
            }

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
            String[] words = cleaned.split("\\s+");
            for (int i = 0; i < words.length; i++) {
                if (words[i].contains("–ê–Ω—Ç–∏-–ß–∏—Ç") && i + 1 < words.length) {
                    String candidate = words[i + 1];
                    if (candidate.matches("[A-Za-z0-9_]{3,16}")) {
                        return candidate;
                    }
                }
            }
        } catch (Exception e) {
            ScS.LOGGER.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞: {}", e.getMessage());
        }

        return null;
    }

    private static ViolationType parseViolationType(String message) {
        String lowerMessage = message.toLowerCase();

        if (lowerMessage.contains("move") || lowerMessage.contains("abnormally")) return ViolationType.MOVE;
        if (lowerMessage.contains("click")) return ViolationType.CLICK;
        if (lowerMessage.contains("fastplace") || lowerMessage.contains("fastbreak")) return ViolationType.FASTPLACE;
        if (lowerMessage.contains("hitbox") || lowerMessage.contains("reach")) return ViolationType.HITBOX;
        if (lowerMessage.contains("velocity")) return ViolationType.VELOCITY;
        if (lowerMessage.contains("killaura") || lowerMessage.contains("combat hacks")) return ViolationType.KILLAURA;
        if (lowerMessage.contains("delay")) return ViolationType.DELAY;
        if (lowerMessage.contains("autobot") || lowerMessage.contains("automatic robots")) return ViolationType.AUTOBOT;

        return ViolationType.MOVE;
    }

    private static int parseCount(String message) {
        try {
            if (message.contains("#")) {
                String[] parts = message.split("#");
                if (parts.length > 1) {
                    String numberPart = parts[1].trim().split("\\s+")[0];
                    return Integer.parseInt(numberPart);
                }
            }
        } catch (Exception e) {
            ScS.LOGGER.warn("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—á–µ—Ç—á–∏–∫–∞: {}", e.getMessage());
        }
        return 1;
    }

    private static void createButtons(String playerName, ViolationType type) {
        try {
            MinecraftClient client = MinecraftClient.getInstance();
            if (client.player == null) {
                ScS.LOGGER.warn("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫");
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            MutableText message = Text.literal("¬ß8¬ßl‚ñ¨‚ñ¨‚ñ¨ ¬ßc¬ßlSCS ANTICHEAT ¬ß8¬ßl‚ñ¨‚ñ¨‚ñ¨");
            message.append(Text.literal("\n¬ß7–ò–≥—Ä–æ–∫: ¬ßf" + playerName));
            message.append(Text.literal("\n¬ß7–ù–∞—Ä—É—à–µ–Ω–∏–µ: ¬ße" + type.getDisplayName()));

            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            MutableText buttons = Text.literal("\n¬ß8¬ßl‚ñ¨ ¬ßf–î–µ–π—Å—Ç–≤–∏—è ¬ß8¬ßl‚ñ¨\n");

            buttons.append(Text.literal("¬ßa[–ó–ê–ú–û–†–û–ó–ò–¢–¨]")
                    .styled(style -> style
                            .withClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/freezing " + playerName))
                            .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,
                                    Text.literal("¬ßa–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")))));

            buttons.append(Text.literal(" ¬ßb[–°–ü–ï–ö]")
                    .styled(style -> style
                            .withClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/matrix spectate " + playerName))
                            .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,
                                    Text.literal("¬ßb–°–ª–µ–¥–∏—Ç—å –∑–∞ –∏–≥—Ä–æ–∫–æ–º")))));

            buttons.append(Text.literal(" ¬ße[–ê–ö–¢–ò–í–ù–û–°–¢–¨]")
                    .styled(style -> style
                            .withClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/playeractivity " + playerName))
                            .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,
                                    Text.literal("¬ße–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞")))));

            buttons.append(Text.literal(" ¬ß6[–ò–°–¢–û–†–ò–Ø]")
                    .styled(style -> style
                            .withClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, "/freezinghistory " + playerName))
                            .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,
                                    Text.literal("¬ß6–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏–≥—Ä–æ–∫–∞")))));

            message.append(buttons);
            message.append(Text.literal("\n¬ß8¬ßl‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨"));

            client.player.sendMessage(message, false);
            ScS.LOGGER.info("‚úÖ –ö–ù–û–ü–ö–ò –û–¢–ü–†–ê–í–õ–ï–ù–´ –¥–ª—è –∏–≥—Ä–æ–∫–∞: {}", playerName);

        } catch (Exception e) {
            ScS.LOGGER.error("‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ö–ù–û–ü–û–ö: {}", e.getMessage());
            e.printStackTrace();
        }
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã
    public static List<AntiCheatDetection> getDetections() {
        synchronized (detections) {
            return new ArrayList<>(detections);
        }
    }

    public static void clearDetections() {
        synchronized (detections) {
            detections.clear();
            ScS.LOGGER.info("üóëÔ∏è –°–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –æ—á–∏—â–µ–Ω");
        }
    }

    public static int getTotalDetections() {
        synchronized (detections) {
            return detections.size();
        }
    }

    public static long getCriticalDetections() {
        synchronized (detections) {
            return detections.stream()
                    .filter(d -> d.getType().isCritical())
                    .count();
        }
    }
}