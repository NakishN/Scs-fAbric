package com.scs.anticheat;

public enum ViolationType {
    MOVE(1, 0x55FF55, "Move", "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
    FASTPLACE(2, 0xFFAA00, "FastPlace", "–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–æ–≤"),
    FASTBREAK(2, 0xFFAA00, "FastBreak", "–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤"),
    DELAY(2, 0xFFAA00, "Delay", "–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"),
    CLICK(3, 0xFF5555, "Click", "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∏–∫–∏"),
    HITBOX(4, 0xFF0000, "HitBox", "–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ö–∏—Ç–±–æ–∫—Å"),
    VELOCITY(4, 0xFF0000, "Velocity", "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∏–¥—ã–≤–∞–Ω–∏—è"),
    KILLAURA(5, 0xAA0000, "KillAura", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞"),
    AUTOBOT(5, 0x800080, "AutoBot", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ");

    private final int priority;
    private final int color;
    private final String displayName;
    private final String description;

    ViolationType(int priority, int color, String displayName, String description) {
        this.priority = priority;
        this.color = color;
        this.displayName = displayName;
        this.description = description;
    }

    public int getPriority() {
        return priority;
    }

    public int getColor() {
        return color;
    }

    public String getDisplayName() {
        return displayName;
    }

    public String getDescription() {
        return description;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–º
     * @return true –µ—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç >= 4 (—Å–µ—Ä—å–µ–∑–Ω—ã–µ —á–∏—Ç—ã)
     */
    public boolean isCritical() {
        return priority >= 4;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Minecraft
     * @return —Å—Ç—Ä–æ–∫–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è Minecraft —á–∞—Ç–∞
     */
    public String getMinecraftColor() {
        switch (this) {
            case MOVE:
                return "¬ßa"; // –ó–µ–ª–µ–Ω—ã–π
            case FASTPLACE:
            case FASTBREAK:
            case DELAY:
                return "¬ße"; // –ñ–µ–ª—Ç—ã–π
            case CLICK:
                return "¬ß6"; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            case HITBOX:
            case VELOCITY:
                return "¬ßc"; // –ö—Ä–∞—Å–Ω—ã–π
            case KILLAURA:
            case AUTOBOT:
                return "¬ß4"; // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
            default:
                return "¬ßf"; // –ë–µ–ª—ã–π
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
     * @return —ç–º–æ–¥–∑–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ç–∏–ø—É
     */
    public String getEmoji() {
        switch (this) {
            case MOVE:
                return "üèÉ";
            case FASTPLACE:
            case FASTBREAK:
                return "‚ö°";
            case DELAY:
                return "‚è±Ô∏è";
            case CLICK:
                return "üñ±Ô∏è";
            case HITBOX:
                return "üìè";
            case VELOCITY:
                return "üí•";
            case KILLAURA:
                return "‚öîÔ∏è";
            case AUTOBOT:
                return "ü§ñ";
            default:
                return "‚ùì";
        }
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
     * @param message —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏–ª–∏ MOVE –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    public static ViolationType fromMessage(String message) {
        String lowerMessage = message.toLowerCase();

        if (lowerMessage.contains("move") || lowerMessage.contains("abnormally")) {
            return MOVE;
        }
        if (lowerMessage.contains("fastplace")) {
            return FASTPLACE;
        }
        if (lowerMessage.contains("fastbreak")) {
            return FASTBREAK;
        }
        if (lowerMessage.contains("delay")) {
            return DELAY;
        }
        if (lowerMessage.contains("click")) {
            return CLICK;
        }
        if (lowerMessage.contains("hitbox") || lowerMessage.contains("reach")) {
            return HITBOX;
        }
        if (lowerMessage.contains("velocity")) {
            return VELOCITY;
        }
        if (lowerMessage.contains("killaura") || lowerMessage.contains("combat hacks")) {
            return KILLAURA;
        }
        if (lowerMessage.contains("autobot") || lowerMessage.contains("automatic robots")) {
            return AUTOBOT;
        }

        return MOVE; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–∏–ø–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
     * @return —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
     */
    public String getRecommendedAction() {
        switch (this) {
            case MOVE:
            case FASTPLACE:
            case FASTBREAK:
            case DELAY:
                return "–ù–∞–±–ª—é–¥–µ–Ω–∏–µ";
            case CLICK:
            case HITBOX:
                return "–ü—Ä–æ–≤–µ—Ä–∫–∞";
            case VELOCITY:
                return "–ó–∞–º–æ—Ä–æ–∑–∫–∞";
            case KILLAURA:
            case AUTOBOT:
                return "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞";
            default:
                return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞";
        }
    }

    @Override
    public String toString() {
        return displayName;
    }
}