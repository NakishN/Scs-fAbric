package com.scs.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.scs.ScS;
import net.fabricmc.loader.api.FabricLoader;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;

public class ModConfig {
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
    private static final Path CONFIG_PATH = FabricLoader.getInstance().getConfigDir().resolve("scs-enhanced-config.json");

    private static ModConfig INSTANCE = new ModConfig();

    // HUD –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    public boolean enableHud = true;
    public int hudX = -320;
    public int hudY = 10;
    public int maxMessages = 100;
    public int showLast = 15;

    // –¶–≤–µ—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 0xRRGGBB)
    public int checkColor = 0x00FF7F;
    public int acColor = 0xFF4444;
    public int violationColor = 0xFFA500;
    public int criticalColor = 0xFF0000;

    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    public boolean enableChatButtons = true;
    public boolean autoCommands = false;

    // –ó–≤—É–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    public boolean soundAlerts = true;
    public String alertSound = "minecraft:block.note_block.bell";

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    public boolean enableLogging = true;
    public boolean logAllChat = false;
    public boolean debugMode = false;

    // –§–∏–ª—å—Ç—Ä—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π
    public List<String> violationKeywords = Arrays.asList(
            "tried to move abnormally",
            "tried to reach entity outside",
            "might be using combat hacks",
            "suspected use of automatic robots",
            "tried to interact",
            "invalid movement",
            "speed hacks",
            "fly hacks",
            "reach entity outside max reach distance"
    );

    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ)
    public String freezeCommand = "/freezing %player%";
    public String spectateCommand = "/matrix spectate %player%";
    public String activityCommand = "/playeractivity %player%";
    public String historyCommand = "/freezinghistory %player%";

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    public boolean showTimestamps = true;
    public boolean showPlayerCount = true;
    public boolean highlightCritical = true;
    public int menuTransparency = 80; // 0-100%

    public static ModConfig getInstance() {
        return INSTANCE;
    }

    public static void load() {
        try {
            if (Files.exists(CONFIG_PATH)) {
                String json = Files.readString(CONFIG_PATH);
                INSTANCE = GSON.fromJson(json, ModConfig.class);

                // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                validate();

                ScS.LOGGER.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {}", CONFIG_PATH);
            } else {
                save(); // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                ScS.LOGGER.info("üìù –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ {}", CONFIG_PATH);
            }
        } catch (Exception e) {
            ScS.LOGGER.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", e.getMessage());
            INSTANCE = new ModConfig(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ñ–æ–ª—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        }
    }

    public static void save() {
        try {
            Files.createDirectories(CONFIG_PATH.getParent());
            String json = GSON.toJson(INSTANCE);
            Files.writeString(CONFIG_PATH, json);
            ScS.LOGGER.info("üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
        } catch (IOException e) {
            ScS.LOGGER.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", e.getMessage());
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    private static void validate() {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        INSTANCE.maxMessages = Math.max(10, Math.min(INSTANCE.maxMessages, 500));
        INSTANCE.showLast = Math.max(5, Math.min(INSTANCE.showLast, 50));
        INSTANCE.menuTransparency = Math.max(0, Math.min(INSTANCE.menuTransparency, 100));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        if (INSTANCE.violationKeywords == null || INSTANCE.violationKeywords.isEmpty()) {
            INSTANCE.violationKeywords = Arrays.asList(
                    "tried to move abnormally",
                    "might be using combat hacks",
                    "suspected use of automatic robots"
            );
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (INSTANCE.freezeCommand == null || !INSTANCE.freezeCommand.contains("%player%")) {
            INSTANCE.freezeCommand = "/freezing %player%";
        }
        if (INSTANCE.spectateCommand == null || !INSTANCE.spectateCommand.contains("%player%")) {
            INSTANCE.spectateCommand = "/matrix spectate %player%";
        }
        if (INSTANCE.activityCommand == null || !INSTANCE.activityCommand.contains("%player%")) {
            INSTANCE.activityCommand = "/playeractivity %player%";
        }
        if (INSTANCE.historyCommand == null || !INSTANCE.historyCommand.contains("%player%")) {
            INSTANCE.historyCommand = "/freezinghistory %player%";
        }
    }

    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    public String getFormattedCommand(String command, String playerName) {
        return command.replace("%player%", playerName);
    }

    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤
    public static int parseColor(String hex, int fallback) {
        try {
            if (hex.startsWith("#")) hex = hex.substring(1);
            return Integer.parseInt(hex, 16);
        } catch (NumberFormatException e) {
            ScS.LOGGER.warn("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞: {}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback", hex);
            return fallback;
        }
    }

    public static String colorToHex(int color) {
        return String.format("#%06X", color & 0xFFFFFF);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
    public void toggleHud() {
        this.enableHud = !this.enableHud;
        save();
    }

    public void toggleSoundAlerts() {
        this.soundAlerts = !this.soundAlerts;
        save();
    }

    public void toggleDebugMode() {
        this.debugMode = !this.debugMode;
        save();
        ScS.LOGGER.info("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {}", this.debugMode ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω");
    }
}